<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_Move_8cpp_source" xml:lang="en-US">
<title>Move.cpp</title>
<indexterm><primary>source/Move.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_Move_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;../include/Move.h&quot;</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00003"/>00003 
<anchor xml:id="_Move_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;Default&#32;controller</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00005"/>00005 Move::Move()
<anchor xml:id="_Move_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;:&#32;Move{0,0,0,0}
<anchor xml:id="_Move_8cpp_source_1l00007"/>00007 {
<anchor xml:id="_Move_8cpp_source_1l00008"/>00008 }
<anchor xml:id="_Move_8cpp_source_1l00009"/>00009 
<anchor xml:id="_Move_8cpp_source_1l00010"/>00010 <emphasis role="comment">//&#32;Constructor&#32;with&#32;numeric&#32;coordinates</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00011"/>00011 Move::Move(<emphasis role="keywordtype">int</emphasis>&#32;startX,&#32;<emphasis role="keywordtype">int</emphasis>&#32;startY,&#32;<emphasis role="keywordtype">int</emphasis>&#32;endX,&#32;<emphasis role="keywordtype">int</emphasis>&#32;endY)
<anchor xml:id="_Move_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;:&#32;startX(startX),&#32;startY(startY),&#32;endX(endX),&#32;endY(endY)
<anchor xml:id="_Move_8cpp_source_1l00013"/>00013 {
<anchor xml:id="_Move_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;validateCoordinates(startX,&#32;startY);
<anchor xml:id="_Move_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;validateCoordinates(endX,&#32;endY);
<anchor xml:id="_Move_8cpp_source_1l00016"/>00016 }
<anchor xml:id="_Move_8cpp_source_1l00017"/>00017 
<anchor xml:id="_Move_8cpp_source_1l00018"/>00018 <emphasis role="comment">//&#32;Constructor&#32;that&#32;accepts&#32;a&#32;move&#32;string,&#32;e.g.,&#32;&quot;e2e4&quot;</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00019"/>00019 Move::Move(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;moveStr)
<anchor xml:id="_Move_8cpp_source_1l00020"/>00020 {
<anchor xml:id="_Move_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;parseMoveString(moveStr);
<anchor xml:id="_Move_8cpp_source_1l00022"/>00022 }
<anchor xml:id="_Move_8cpp_source_1l00023"/>00023 
<anchor xml:id="_Move_8cpp_source_1l00024"/>00024 <emphasis role="keywordtype">bool</emphasis>&#32;Move::empty()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00025"/>00025 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_Move_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;startX&#32;==&#32;0&#32;&amp;&amp;&#32;startY&#32;==&#32;0&#32;&amp;&amp;&#32;endX&#32;==&#32;0&#32;&amp;&amp;&#32;endY&#32;==&#32;0;
<anchor xml:id="_Move_8cpp_source_1l00027"/>00027 }
<anchor xml:id="_Move_8cpp_source_1l00028"/>00028 
<anchor xml:id="_Move_8cpp_source_1l00029"/>00029 <emphasis role="comment">//&#32;Helper&#32;function&#32;to&#32;check&#32;if&#32;a&#32;given&#32;coordinate&#32;pair&#32;is&#32;within&#32;the&#32;chessboard&#32;bounds&#32;(0-7)</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00030"/>00030 <emphasis role="keywordtype">void</emphasis>&#32;Move::validateCoordinates(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00031"/>00031 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_Move_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;0&#32;||&#32;x&#32;&gt;=&#32;8&#32;||&#32;y&#32;&lt;&#32;0&#32;||&#32;y&#32;&gt;=&#32;8)
<anchor xml:id="_Move_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;{
<anchor xml:id="_Move_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::out_of_range(<emphasis role="stringliteral">&quot;Coordinates&#32;out&#32;of&#32;bounds.&#32;Valid&#32;range&#32;is&#32;a&#32;to&#32;h&#32;for&#32;x&#32;and&#32;1&#32;to&#32;8&#32;for&#32;y.&quot;</emphasis>);
<anchor xml:id="_Move_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Move_8cpp_source_1l00036"/>00036 }
<anchor xml:id="_Move_8cpp_source_1l00037"/>00037 
<anchor xml:id="_Move_8cpp_source_1l00038"/>00038 <emphasis role="comment">//&#32;Parses&#32;a&#32;move&#32;string&#32;of&#32;the&#32;format&#32;\&quot;[a-h][1-8][a-h][1-8]\&quot;&#32;and&#32;sets&#32;the&#32;coordinates&#32;accordingly</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00039"/>00039 <emphasis role="keywordtype">void</emphasis>&#32;Move::parseMoveString(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;moveStr)
<anchor xml:id="_Move_8cpp_source_1l00040"/>00040 {&#32;&#32;&#32;&#32;
<anchor xml:id="_Move_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(moveStr.length()&#32;!=&#32;4)
<anchor xml:id="_Move_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;{
<anchor xml:id="_Move_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::invalid_argument(<emphasis role="stringliteral">&quot;Move&#32;string&#32;must&#32;be&#32;exactly&#32;4&#32;characters&#32;long.&quot;</emphasis>);
<anchor xml:id="_Move_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Move_8cpp_source_1l00045"/>00045 
<anchor xml:id="_Move_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;startFile&#32;=&#32;moveStr[0];
<anchor xml:id="_Move_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;startRank&#32;=&#32;moveStr[1];
<anchor xml:id="_Move_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;endFile&#32;=&#32;moveStr[2];
<anchor xml:id="_Move_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;endRank&#32;=&#32;moveStr[3];
<anchor xml:id="_Move_8cpp_source_1l00050"/>00050 
<anchor xml:id="_Move_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;algebraic&#32;notation&#32;into&#32;0-indexed&#32;board&#32;coordinates</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;startX&#32;=&#32;startFile&#32;-&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>;
<anchor xml:id="_Move_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;startY&#32;=&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>&#32;-&#32;startRank;
<anchor xml:id="_Move_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;endX&#32;&#32;&#32;=&#32;endFile&#32;&#32;&#32;-&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>;
<anchor xml:id="_Move_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;endY&#32;&#32;&#32;=&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>&#32;-&#32;endRank;
<anchor xml:id="_Move_8cpp_source_1l00056"/>00056 
<anchor xml:id="_Move_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validate&#32;the&#32;computed&#32;coordinates</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;validateCoordinates(startX,&#32;startY);
<anchor xml:id="_Move_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;validateCoordinates(endX,&#32;endY);
<anchor xml:id="_Move_8cpp_source_1l00060"/>00060 }
<anchor xml:id="_Move_8cpp_source_1l00061"/>00061 
<anchor xml:id="_Move_8cpp_source_1l00062"/>00062 <emphasis role="comment">//&#32;Checks&#32;whether&#32;the&#32;stored&#32;move&#32;coordinates&#32;are&#32;valid&#32;within&#32;an&#32;8x8&#32;chessboard</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00063"/>00063 <emphasis role="keywordtype">bool</emphasis>&#32;Move::isValid()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00064"/>00064 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_Move_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(startX&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;startX&#32;&lt;&#32;8&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startY&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;startY&#32;&lt;&#32;8&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endX&#32;&#32;&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;endX&#32;&#32;&#32;&lt;&#32;8&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endY&#32;&#32;&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;endY&#32;&#32;&#32;&lt;&#32;8);
<anchor xml:id="_Move_8cpp_source_1l00069"/>00069 }
<anchor xml:id="_Move_8cpp_source_1l00070"/>00070 
<anchor xml:id="_Move_8cpp_source_1l00071"/>00071 <emphasis role="comment">//&#32;Converts&#32;the&#32;move&#32;back&#32;into&#32;algebraic&#32;chess&#32;notation&#32;(e.g.,&#32;\&quot;e2e4\&quot;)</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00072"/>00072 std::string&#32;Move::toString()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00073"/>00073 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_Move_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;startFile&#32;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;+&#32;startX;
<anchor xml:id="_Move_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;startRank&#32;=&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>&#32;-&#32;startY;
<anchor xml:id="_Move_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;endFile&#32;&#32;&#32;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;+&#32;endX;
<anchor xml:id="_Move_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;endRank&#32;&#32;&#32;=&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>&#32;-&#32;endY;
<anchor xml:id="_Move_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string()&#32;+&#32;startFile&#32;+&#32;startRank&#32;+&#32;endFile&#32;+&#32;endRank;
<anchor xml:id="_Move_8cpp_source_1l00079"/>00079 }
<anchor xml:id="_Move_8cpp_source_1l00080"/>00080 
<anchor xml:id="_Move_8cpp_source_1l00081"/>00081 <emphasis role="comment">//&#32;Comparison&#32;operator&#32;to&#32;check&#32;if&#32;two&#32;moves&#32;are&#32;identical</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00082"/>00082 <emphasis role="keywordtype">bool</emphasis>&#32;Move::operator==(<emphasis role="keyword">const</emphasis>&#32;Move&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_Move_8cpp_source_1l00083"/>00083 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_Move_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(startX&#32;==&#32;other.startX&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startY&#32;==&#32;other.startY&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endX&#32;&#32;&#32;==&#32;other.endX&#32;&amp;&amp;
<anchor xml:id="_Move_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endY&#32;&#32;&#32;==&#32;other.endY);
<anchor xml:id="_Move_8cpp_source_1l00088"/>00088 }
</programlisting></section>
