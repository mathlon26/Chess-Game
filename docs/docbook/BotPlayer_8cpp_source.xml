<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_BotPlayer_8cpp_source" xml:lang="en-US">
<title>BotPlayer.cpp</title>
<indexterm><primary>source/BotPlayer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_BotPlayer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;../include/BotPlayer.h&quot;</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;../include/Board.h&quot;</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00003"/>00003 
<anchor xml:id="_BotPlayer_8cpp_source_1l00004"/>00004 
<anchor xml:id="_BotPlayer_8cpp_source_1l00005"/>00005 BotPlayer::BotPlayer(PlayerColor&#32;color)
<anchor xml:id="_BotPlayer_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;:
<anchor xml:id="_BotPlayer_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;Player{color}
<anchor xml:id="_BotPlayer_8cpp_source_1l00008"/>00008 {
<anchor xml:id="_BotPlayer_8cpp_source_1l00009"/>00009 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00010"/>00010 
<anchor xml:id="_BotPlayer_8cpp_source_1l00011"/>00011 BotPlayer::~BotPlayer()
<anchor xml:id="_BotPlayer_8cpp_source_1l00012"/>00012 {
<anchor xml:id="_BotPlayer_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Piece*&#32;piece&#32;:&#32;m_captures)
<anchor xml:id="_BotPlayer_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;piece;
<anchor xml:id="_BotPlayer_8cpp_source_1l00015"/>00015 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00016"/>00016 
<anchor xml:id="_BotPlayer_8cpp_source_1l00017"/>00017 std::string&#32;BotPlayer::Name()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00018"/>00018 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_BotPlayer_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Style::Cts(m_color)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;(Bot)&quot;</emphasis>;
<anchor xml:id="_BotPlayer_8cpp_source_1l00020"/>00020 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00021"/>00021 
<anchor xml:id="_BotPlayer_8cpp_source_1l00022"/>00022 std::string&#32;BotPlayer::GetInput(<emphasis role="keyword">const</emphasis>&#32;Board*&#32;<emphasis role="keyword">const</emphasis>&#32;board)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00023"/>00023 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_BotPlayer_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;std::vector&lt;Move&gt;&#32;moves&#32;=&#32;board-&gt;GetPossibleMoves(m_color);
<anchor xml:id="_BotPlayer_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;std::vector&lt;Move&gt;&#32;validMoves{};
<anchor xml:id="_BotPlayer_8cpp_source_1l00026"/>00026 
<anchor xml:id="_BotPlayer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;move&#32;:&#32;moves)
<anchor xml:id="_BotPlayer_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;{
<anchor xml:id="_BotPlayer_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::find(m_cache.begin(),&#32;m_cache.end(),&#32;move.toString())&#32;==&#32;m_cache.end())
<anchor xml:id="_BotPlayer_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_BotPlayer_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validMoves.push_back(move);
<anchor xml:id="_BotPlayer_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_BotPlayer_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_BotPlayer_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;
<anchor xml:id="_BotPlayer_8cpp_source_1l00035"/>00035 
<anchor xml:id="_BotPlayer_8cpp_source_1l00036"/>00036 
<anchor xml:id="_BotPlayer_8cpp_source_1l00037"/>00037 
<anchor xml:id="_BotPlayer_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;no&#32;moves&#32;are&#32;available,&#32;return&#32;a&#32;&quot;resign&quot;&#32;command.</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(validMoves.empty())
<anchor xml:id="_BotPlayer_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;resign&quot;</emphasis>;
<anchor xml:id="_BotPlayer_8cpp_source_1l00041"/>00041 
<anchor xml:id="_BotPlayer_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;random&#32;engine&#32;with&#32;a&#32;random&#32;seed</emphasis>
<anchor xml:id="_BotPlayer_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;std::random_device&#32;rd;
<anchor xml:id="_BotPlayer_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;std::mt19937&#32;gen(rd());
<anchor xml:id="_BotPlayer_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;&gt;&#32;dis(0,&#32;validMoves.size()&#32;-&#32;1);
<anchor xml:id="_BotPlayer_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;dis(gen);
<anchor xml:id="_BotPlayer_8cpp_source_1l00047"/>00047 
<anchor xml:id="_BotPlayer_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;Move&#32;chosenMove&#32;=&#32;validMoves[index];
<anchor xml:id="_BotPlayer_8cpp_source_1l00049"/>00049 
<anchor xml:id="_BotPlayer_8cpp_source_1l00050"/>00050 
<anchor xml:id="_BotPlayer_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chosenMove.toString();
<anchor xml:id="_BotPlayer_8cpp_source_1l00052"/>00052 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00053"/>00053 
<anchor xml:id="_BotPlayer_8cpp_source_1l00054"/>00054 <emphasis role="keywordtype">bool</emphasis>&#32;BotPlayer::IsBot()
<anchor xml:id="_BotPlayer_8cpp_source_1l00055"/>00055 {
<anchor xml:id="_BotPlayer_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_BotPlayer_8cpp_source_1l00057"/>00057 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00058"/>00058 
<anchor xml:id="_BotPlayer_8cpp_source_1l00059"/>00059 <emphasis role="keywordtype">void</emphasis>&#32;BotPlayer::AddCache(std::string&#32;moveStr)
<anchor xml:id="_BotPlayer_8cpp_source_1l00060"/>00060 {
<anchor xml:id="_BotPlayer_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;m_cache.insert(moveStr);
<anchor xml:id="_BotPlayer_8cpp_source_1l00062"/>00062 }
<anchor xml:id="_BotPlayer_8cpp_source_1l00063"/>00063 
<anchor xml:id="_BotPlayer_8cpp_source_1l00064"/>00064 <emphasis role="keywordtype">void</emphasis>&#32;BotPlayer::EmptyCache()
<anchor xml:id="_BotPlayer_8cpp_source_1l00065"/>00065 {
<anchor xml:id="_BotPlayer_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;m_cache.clear();
<anchor xml:id="_BotPlayer_8cpp_source_1l00067"/>00067 }
</programlisting></section>
