<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_ChessGame_8cpp_source" xml:lang="en-US">
<title>ChessGame.cpp</title>
<indexterm><primary>source/ChessGame.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_ChessGame_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;../include/ChessGame.h&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;../include/HumanPlayer.h&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;../include/BotPlayer.h&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00005"/>00005 
<anchor xml:id="_ChessGame_8cpp_source_1l00006"/>00006 
<anchor xml:id="_ChessGame_8cpp_source_1l00007"/>00007 ChessGame::ChessGame()
<anchor xml:id="_ChessGame_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;:
<anchor xml:id="_ChessGame_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;m_board{new&#32;Board{}},
<anchor xml:id="_ChessGame_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;m_timerOne{0},
<anchor xml:id="_ChessGame_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;m_timerTwo{0},
<anchor xml:id="_ChessGame_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;m_increment{0}
<anchor xml:id="_ChessGame_8cpp_source_1l00013"/>00013 {
<anchor xml:id="_ChessGame_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_ChessGame_8cpp_source_1l00015"/>00015 
<anchor xml:id="_ChessGame_8cpp_source_1l00016"/>00016 ChessGame::~ChessGame()
<anchor xml:id="_ChessGame_8cpp_source_1l00017"/>00017 {
<anchor xml:id="_ChessGame_8cpp_source_1l00018"/>00018 }
<anchor xml:id="_ChessGame_8cpp_source_1l00019"/>00019 
<anchor xml:id="_ChessGame_8cpp_source_1l00020"/>00020 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::Run()
<anchor xml:id="_ChessGame_8cpp_source_1l00021"/>00021 {
<anchor xml:id="_ChessGame_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;first&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;Init();
<anchor xml:id="_ChessGame_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ShouldRun())
<anchor xml:id="_ChessGame_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartTimer();
<anchor xml:id="_ChessGame_8cpp_source_1l00028"/>00028 
<anchor xml:id="_ChessGame_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Update();
<anchor xml:id="_ChessGame_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Draw();
<anchor xml:id="_ChessGame_8cpp_source_1l00031"/>00031 
<anchor xml:id="_ChessGame_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StopTimer();
<anchor xml:id="_ChessGame_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SwitchTurn();
<anchor xml:id="_ChessGame_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00035"/>00035 }
<anchor xml:id="_ChessGame_8cpp_source_1l00036"/>00036 
<anchor xml:id="_ChessGame_8cpp_source_1l00037"/>00037 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::SetupPlayers()
<anchor xml:id="_ChessGame_8cpp_source_1l00038"/>00038 {
<anchor xml:id="_ChessGame_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;optP;&#32;<emphasis role="comment">//&#32;player&#32;versus&#32;X&#32;option</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;optC{1};&#32;<emphasis role="comment">//&#32;player&#32;color&#32;option</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintBox(
<anchor xml:id="_ChessGame_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1.&#32;Player&#32;versus&#32;Player\n&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2.&#32;Player&#32;versus&#32;Bot&quot;</emphasis>,
<anchor xml:id="_ChessGame_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Game&#32;Mode&#32;&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_ChessGame_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optP&#32;=&#32;std::stoi(GetStringInput(<emphasis role="stringliteral">&quot;&#32;&gt;&gt;&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Enter&#32;a&#32;number&#32;(1,2)&quot;</emphasis>).c_str());
<anchor xml:id="_ChessGame_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(optP&#32;!=&#32;1&#32;&amp;&amp;&#32;optP&#32;!=&#32;2&#32;&amp;&amp;&#32;optP&#32;!=&#32;3);&#32;<emphasis role="comment">//&#32;optP&#32;3&#32;is&#32;hidden&#32;to&#32;play&#32;Bot&#32;V&#32;Bot</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00051"/>00051 
<anchor xml:id="_ChessGame_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(optP&#32;==&#32;2)
<anchor xml:id="_ChessGame_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintBox(
<anchor xml:id="_ChessGame_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1.&#32;Player&#32;plays&#32;white\n&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2.&#32;Bot&#32;plays&#32;white&quot;</emphasis>,
<anchor xml:id="_ChessGame_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Player&#32;Color&#32;&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_ChessGame_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optC&#32;=&#32;std::stoi(GetStringInput(<emphasis role="stringliteral">&quot;&#32;&gt;&gt;&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Enter&#32;a&#32;number&#32;(1,2)&quot;</emphasis>).c_str());
<anchor xml:id="_ChessGame_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(optC&#32;!=&#32;1&#32;&amp;&amp;&#32;optC&#32;!=&#32;2);
<anchor xml:id="_ChessGame_8cpp_source_1l00064"/>00064 
<anchor xml:id="_ChessGame_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(optC&#32;==&#32;1)
<anchor xml:id="_ChessGame_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HumanPlayer{Color::WHITE};
<anchor xml:id="_ChessGame_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BotPlayer{Color::BLACK};
<anchor xml:id="_ChessGame_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BotPlayer{Color::WHITE};
<anchor xml:id="_ChessGame_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HumanPlayer{Color::BLACK};
<anchor xml:id="_ChessGame_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(optP&#32;==&#32;3)
<anchor xml:id="_ChessGame_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BotPlayer{PlayerColor::WHITE};
<anchor xml:id="_ChessGame_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BotPlayer{PlayerColor::BLACK};
<anchor xml:id="_ChessGame_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerOne&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HumanPlayer{Color::WHITE};
<anchor xml:id="_ChessGame_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_playerTwo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HumanPlayer{Color::BLACK};
<anchor xml:id="_ChessGame_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;m_playerOnTurn&#32;=&#32;m_playerOne;
<anchor xml:id="_ChessGame_8cpp_source_1l00087"/>00087 
<anchor xml:id="_ChessGame_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00089"/>00089 }
<anchor xml:id="_ChessGame_8cpp_source_1l00090"/>00090 
<anchor xml:id="_ChessGame_8cpp_source_1l00091"/>00091 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::SetupTimers()
<anchor xml:id="_ChessGame_8cpp_source_1l00092"/>00092 {
<anchor xml:id="_ChessGame_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;optT{<emphasis role="keyword">false</emphasis>};&#32;<emphasis role="comment">//&#32;timer&#32;bool</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;optD{0};&#32;<emphasis role="comment">//&#32;timer&#32;duration&#32;(minutes)</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;optI{0};&#32;<emphasis role="comment">//&#32;timer&#32;increment&#32;(seconds)</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00096"/>00096 
<anchor xml:id="_ChessGame_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;optT&#32;=&#32;GetBoolInput(<emphasis role="stringliteral">&quot;&#32;&gt;&gt;&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Do&#32;you&#32;want&#32;to&#32;play&#32;with&#32;a&#32;timer?&quot;</emphasis>,&#32;Color::GREEN);
<anchor xml:id="_ChessGame_8cpp_source_1l00099"/>00099 
<anchor xml:id="_ChessGame_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(optT)
<anchor xml:id="_ChessGame_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optD&#32;=&#32;std::stoi(GetStringInput(<emphasis role="stringliteral">&quot;&#32;&gt;&gt;&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Set&#32;the&#32;duration&#32;of&#32;the&#32;timer&#32;in&#32;minutes&#32;(&gt;=1).&quot;</emphasis>).c_str());
<anchor xml:id="_ChessGame_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(optD&#32;&lt;&#32;1);
<anchor xml:id="_ChessGame_8cpp_source_1l00106"/>00106 
<anchor xml:id="_ChessGame_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optI&#32;=&#32;std::stoi(GetStringInput(<emphasis role="stringliteral">&quot;&#32;&gt;&gt;&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Set&#32;the&#32;increment&#32;of&#32;the&#32;timer&#32;in&#32;seconds&#32;(&gt;=0).&quot;</emphasis>).c_str());
<anchor xml:id="_ChessGame_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(optI&#32;&lt;&#32;0);
<anchor xml:id="_ChessGame_8cpp_source_1l00111"/>00111 
<anchor xml:id="_ChessGame_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_increment&#32;=&#32;optI;
<anchor xml:id="_ChessGame_8cpp_source_1l00113"/>00113 
<anchor xml:id="_ChessGame_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;both&#32;timers&#32;to&#32;the&#32;user-set&#32;duration&#32;in&#32;seconds.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerOne&#32;=&#32;optD&#32;*&#32;60;
<anchor xml:id="_ChessGame_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerTwo&#32;=&#32;optD&#32;*&#32;60;
<anchor xml:id="_ChessGame_8cpp_source_1l00117"/>00117 
<anchor xml:id="_ChessGame_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;timer&#32;thread.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerActive&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerThread&#32;=&#32;std::thread(&amp;ChessGame::TimerThreadFunction,&#32;<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_ChessGame_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00124"/>00124 }
<anchor xml:id="_ChessGame_8cpp_source_1l00125"/>00125 
<anchor xml:id="_ChessGame_8cpp_source_1l00126"/>00126 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::TimerThreadFunction()&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m_timerActive&#32;&amp;&amp;&#32;!m_exitCall)
<anchor xml:id="_ChessGame_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;current&#32;time&#32;and&#32;compute&#32;elapsed&#32;seconds&#32;since&#32;the&#32;move&#32;started.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;now&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_ChessGame_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elapsedSeconds&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::seconds&gt;(now&#32;-&#32;m_moveStartTime).count();
<anchor xml:id="_ChessGame_8cpp_source_1l00132"/>00132 
<anchor xml:id="_ChessGame_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;remaining&#32;time&#32;for&#32;each&#32;player.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;active&#32;player,&#32;subtract&#32;the&#32;elapsed&#32;time.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;whiteRemaining&#32;=&#32;m_timerOne;
<anchor xml:id="_ChessGame_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;blackRemaining&#32;=&#32;m_timerTwo;
<anchor xml:id="_ChessGame_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_playerOnTurn-&gt;Color()&#32;==&#32;Color::WHITE)&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;whiteRemaining&#32;=&#32;(m_timerOne&#32;&gt;&#32;elapsedSeconds)&#32;?&#32;m_timerOne&#32;-&#32;elapsedSeconds&#32;:&#32;0;
<anchor xml:id="_ChessGame_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(whiteRemaining&#32;==&#32;0)
<anchor xml:id="_ChessGame_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndGame(m_playerTwo);
<anchor xml:id="_ChessGame_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_playerOnTurn-&gt;Color()&#32;==&#32;Color::BLACK)&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blackRemaining&#32;=&#32;(m_timerTwo&#32;&gt;&#32;elapsedSeconds)&#32;?&#32;m_timerTwo&#32;-&#32;elapsedSeconds&#32;:&#32;0;
<anchor xml:id="_ChessGame_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(blackRemaining&#32;==&#32;0)
<anchor xml:id="_ChessGame_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndGame(m_playerOne);
<anchor xml:id="_ChessGame_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00152"/>00152 
<anchor xml:id="_ChessGame_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;seconds&#32;to&#32;minutes&#32;and&#32;seconds.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;whiteMinutes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(whiteRemaining&#32;/&#32;60);
<anchor xml:id="_ChessGame_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;whiteSeconds&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(whiteRemaining&#32;%&#32;60);
<anchor xml:id="_ChessGame_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;blackMinutes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(blackRemaining&#32;/&#32;60);
<anchor xml:id="_ChessGame_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;blackSeconds&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(blackRemaining&#32;%&#32;60);
<anchor xml:id="_ChessGame_8cpp_source_1l00158"/>00158 
<anchor xml:id="_ChessGame_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;the&#32;current&#32;cursor&#32;position.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[s&quot;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;ANSI&#32;escape&#32;code&#32;to&#32;save&#32;cursor&#32;position</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00161"/>00161 
<anchor xml:id="_ChessGame_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;White&apos;s&#32;timer&#32;at&#32;row&#32;1,&#32;column&#32;54.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[2;44H&quot;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;cursor&#32;to&#32;row&#32;1,&#32;column&#32;54.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;BoldText(Cta(Color::WHITE)&#32;+&#32;<emphasis role="stringliteral">&quot;White:&#32;&quot;</emphasis>)&#32;&lt;&lt;&#32;Cts(Color::DEFAULT)
<anchor xml:id="_ChessGame_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(whiteMinutes&#32;&lt;&#32;10&#32;?&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;&lt;&lt;&#32;whiteMinutes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(whiteSeconds&#32;&lt;&#32;10&#32;?&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;&lt;&lt;&#32;whiteSeconds;
<anchor xml:id="_ChessGame_8cpp_source_1l00167"/>00167 
<anchor xml:id="_ChessGame_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;Black&apos;s&#32;timer&#32;at&#32;row&#32;2,&#32;column&#32;54.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[3;44H&quot;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;cursor&#32;to&#32;row&#32;2,&#32;column&#32;54.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;BoldText(Cta(Color::BLACK)&#32;+&#32;<emphasis role="stringliteral">&quot;Black:&#32;&quot;</emphasis>)&#32;&lt;&lt;&#32;Cts(Color::DEFAULT)
<anchor xml:id="_ChessGame_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(blackMinutes&#32;&lt;&#32;10&#32;?&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;&lt;&lt;&#32;blackMinutes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(blackSeconds&#32;&lt;&#32;10&#32;?&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;&lt;&lt;&#32;blackSeconds;
<anchor xml:id="_ChessGame_8cpp_source_1l00173"/>00173 
<anchor xml:id="_ChessGame_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Restore&#32;the&#32;previous&#32;cursor&#32;position&#32;so&#32;user&#32;input&#32;stays&#32;in&#32;place.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[u&quot;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;ANSI&#32;escape&#32;code&#32;to&#32;restore&#32;cursor&#32;position</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00176"/>00176 
<anchor xml:id="_ChessGame_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout.flush();
<anchor xml:id="_ChessGame_8cpp_source_1l00178"/>00178 
<anchor xml:id="_ChessGame_8cpp_source_1l00179"/>00179 
<anchor xml:id="_ChessGame_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sleep&#32;a&#32;short&#32;period&#32;to&#32;update&#32;the&#32;display&#32;continuously.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::this_thread::sleep_for(std::chrono::milliseconds(500));
<anchor xml:id="_ChessGame_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00183"/>00183 }
<anchor xml:id="_ChessGame_8cpp_source_1l00184"/>00184 
<anchor xml:id="_ChessGame_8cpp_source_1l00185"/>00185 
<anchor xml:id="_ChessGame_8cpp_source_1l00186"/>00186 
<anchor xml:id="_ChessGame_8cpp_source_1l00187"/>00187 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::Init()
<anchor xml:id="_ChessGame_8cpp_source_1l00188"/>00188 {
<anchor xml:id="_ChessGame_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;SetupPlayers();
<anchor xml:id="_ChessGame_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;SetupTimers();
<anchor xml:id="_ChessGame_8cpp_source_1l00191"/>00191 }
<anchor xml:id="_ChessGame_8cpp_source_1l00192"/>00192 
<anchor xml:id="_ChessGame_8cpp_source_1l00193"/>00193 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::EndGame(Player*&#32;winner,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;resign,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;notime)
<anchor xml:id="_ChessGame_8cpp_source_1l00194"/>00194 {
<anchor xml:id="_ChessGame_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;PrintBox(
<anchor xml:id="_ChessGame_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;winner-&gt;Name()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;has&#32;won!&quot;</emphasis>,
<anchor xml:id="_ChessGame_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Game&#32;ended&#32;&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;);
<anchor xml:id="_ChessGame_8cpp_source_1l00200"/>00200 
<anchor xml:id="_ChessGame_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;exit(0);
<anchor xml:id="_ChessGame_8cpp_source_1l00202"/>00202 }
<anchor xml:id="_ChessGame_8cpp_source_1l00203"/>00203 
<anchor xml:id="_ChessGame_8cpp_source_1l00204"/>00204 Move&#32;ChessGame::GetPlayerMove()
<anchor xml:id="_ChessGame_8cpp_source_1l00205"/>00205 {
<anchor xml:id="_ChessGame_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;Move&#32;playerMove{};
<anchor xml:id="_ChessGame_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_ChessGame_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;checked&#32;=&#32;m_board-&gt;IsKingChecked(m_playerOnTurn-&gt;Color());
<anchor xml:id="_ChessGame_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;noMoves&#32;=&#32;m_board-&gt;GetPossibleMoves(m_playerOnTurn-&gt;Color()).empty();
<anchor xml:id="_ChessGame_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checked&#32;&amp;&amp;&#32;noMoves)&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndGame(m_playerOnTurn&#32;==&#32;m_playerOne&#32;?&#32;m_playerTwo&#32;:&#32;m_playerOne);
<anchor xml:id="_ChessGame_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Move{};
<anchor xml:id="_ChessGame_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00218"/>00218 
<anchor xml:id="_ChessGame_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;moveStr&#32;=&#32;m_playerOnTurn-&gt;GetInput(m_board);
<anchor xml:id="_ChessGame_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(moveStr&#32;==&#32;<emphasis role="stringliteral">&quot;resign&quot;</emphasis>)&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EndGame(m_playerOnTurn&#32;==&#32;m_playerOne&#32;?&#32;m_playerTwo&#32;:&#32;m_playerOne,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_ChessGame_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Move{};
<anchor xml:id="_ChessGame_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;playerMove&#32;=&#32;Move{moveStr};
<anchor xml:id="_ChessGame_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;playerMove;
<anchor xml:id="_ChessGame_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;&#32;e)
<anchor xml:id="_ChessGame_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;must&#32;make&#32;sure&#32;a&#32;BotPlayer&#32;returns&#32;valid&#32;input,&#32;otherwise&#32;this&#32;will&#32;be&#32;executed.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintError(<emphasis role="stringliteral">&quot;Invalid&#32;input,&#32;example&#32;format:&#32;&apos;e2e4&apos;&#32;\n&#32;&#32;|&#32;&quot;</emphasis>&#32;+&#32;std::string{e.what()});
<anchor xml:id="_ChessGame_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00235"/>00235 }
<anchor xml:id="_ChessGame_8cpp_source_1l00236"/>00236 
<anchor xml:id="_ChessGame_8cpp_source_1l00237"/>00237 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::Update()
<anchor xml:id="_ChessGame_8cpp_source_1l00238"/>00238 {
<anchor xml:id="_ChessGame_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;succeed&#32;{<emphasis role="keyword">false</emphasis>};
<anchor xml:id="_ChessGame_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;Move&#32;playerMove;
<anchor xml:id="_ChessGame_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;playerMove&#32;=&#32;GetPlayerMove();
<anchor xml:id="_ChessGame_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(playerMove.empty())
<anchor xml:id="_ChessGame_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00246"/>00246 
<anchor xml:id="_ChessGame_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_playerOnTurn-&gt;IsBot())
<anchor xml:id="_ChessGame_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BotPlayer*&#32;bot&#32;=&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis>BotPlayer*<emphasis role="keyword">&gt;</emphasis>(m_playerOnTurn);
<anchor xml:id="_ChessGame_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bot-&gt;AddCache(playerMove.toString());
<anchor xml:id="_ChessGame_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00253"/>00253 
<anchor xml:id="_ChessGame_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;succeed&#32;=&#32;m_board-&gt;ExecuteMove(playerMove,&#32;m_playerOnTurn);
<anchor xml:id="_ChessGame_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!succeed&#32;&amp;&amp;&#32;!m_playerOnTurn-&gt;IsBot())
<anchor xml:id="_ChessGame_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintError(<emphasis role="stringliteral">&quot;Invalid&#32;Move!&quot;</emphasis>);
<anchor xml:id="_ChessGame_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!&#32;succeed);
<anchor xml:id="_ChessGame_8cpp_source_1l00258"/>00258 
<anchor xml:id="_ChessGame_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_playerOnTurn-&gt;IsBot())
<anchor xml:id="_ChessGame_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintBox(Cta(m_playerOnTurn-&gt;Color())&#32;+&#32;playerMove.toString(),&#32;<emphasis role="stringliteral">&quot;Bot&quot;</emphasis>);
<anchor xml:id="_ChessGame_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::this_thread::sleep_for(std::chrono::milliseconds(500));</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BotPlayer*&#32;bot&#32;=&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis>BotPlayer*<emphasis role="keyword">&gt;</emphasis>(m_playerOnTurn);
<anchor xml:id="_ChessGame_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bot-&gt;EmptyCache();
<anchor xml:id="_ChessGame_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00266"/>00266 }
<anchor xml:id="_ChessGame_8cpp_source_1l00267"/>00267 
<anchor xml:id="_ChessGame_8cpp_source_1l00268"/>00268 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::Draw()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00269"/>00269 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_ChessGame_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_exitCall)
<anchor xml:id="_ChessGame_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;
<anchor xml:id="_ChessGame_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;ClearConsole();
<anchor xml:id="_ChessGame_8cpp_source_1l00274"/>00274 
<anchor xml:id="_ChessGame_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
<anchor xml:id="_ChessGame_8cpp_source_1l00276"/>00276 
<anchor xml:id="_ChessGame_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[0;0H\033[0m&quot;</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00278"/>00278 
<anchor xml:id="_ChessGame_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;Player*&#32;player&#32;=&#32;m_playerOnTurn-&gt;Color()&#32;==&#32;m_playerOne-&gt;Color()&#32;?&#32;m_playerTwo&#32;:&#32;m_playerOne;
<anchor xml:id="_ChessGame_8cpp_source_1l00280"/>00280 
<anchor xml:id="_ChessGame_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Player&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;player-&gt;Name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;may&#32;make&#32;a&#32;move.\n&quot;</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Cta(m_playerOne-&gt;Color())&#32;&lt;&lt;&#32;m_playerOne-&gt;Name()&#32;&lt;&lt;&#32;Cta(Color::DEFAULT)&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;has&#32;captured:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Cta(m_playerOne-&gt;Color());
<anchor xml:id="_ChessGame_8cpp_source_1l00283"/>00283 
<anchor xml:id="_ChessGame_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;capture&#32;:&#32;m_playerOne-&gt;GetCaptures())
<anchor xml:id="_ChessGame_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;capture-&gt;Symbol()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&lt;&lt;&#32;Cta(m_playerTwo-&gt;Color())&#32;&lt;&lt;&#32;m_playerTwo-&gt;Name()&#32;&lt;&lt;&#32;Cta(Color::DEFAULT)&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;has&#32;captured:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Cta(m_playerTwo-&gt;Color());
<anchor xml:id="_ChessGame_8cpp_source_1l00287"/>00287 
<anchor xml:id="_ChessGame_8cpp_source_1l00288"/>00288 
<anchor xml:id="_ChessGame_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;capture&#32;:&#32;m_playerTwo-&gt;GetCaptures())
<anchor xml:id="_ChessGame_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;capture-&gt;Symbol()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
<anchor xml:id="_ChessGame_8cpp_source_1l00291"/>00291 
<anchor xml:id="_ChessGame_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;Cta(Color::DEFAULT);
<anchor xml:id="_ChessGame_8cpp_source_1l00293"/>00293 
<anchor xml:id="_ChessGame_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;PrintBox(oss.str(),&#32;<emphasis role="stringliteral">&quot;&#32;Game&#32;Stats&#32;&quot;</emphasis>);
<anchor xml:id="_ChessGame_8cpp_source_1l00295"/>00295 
<anchor xml:id="_ChessGame_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;m_board-&gt;Draw();
<anchor xml:id="_ChessGame_8cpp_source_1l00297"/>00297 
<anchor xml:id="_ChessGame_8cpp_source_1l00298"/>00298 }
<anchor xml:id="_ChessGame_8cpp_source_1l00299"/>00299 
<anchor xml:id="_ChessGame_8cpp_source_1l00300"/>00300 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::StartTimer()
<anchor xml:id="_ChessGame_8cpp_source_1l00301"/>00301 {
<anchor xml:id="_ChessGame_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Record&#32;the&#32;current&#32;time&#32;as&#32;the&#32;start&#32;of&#32;the&#32;move.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;m_moveStartTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_ChessGame_8cpp_source_1l00304"/>00304 }
<anchor xml:id="_ChessGame_8cpp_source_1l00305"/>00305 
<anchor xml:id="_ChessGame_8cpp_source_1l00306"/>00306 <emphasis role="keywordtype">void</emphasis>&#32;ChessGame::StopTimer()
<anchor xml:id="_ChessGame_8cpp_source_1l00307"/>00307 {
<anchor xml:id="_ChessGame_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;current&#32;time&#32;and&#32;calculate&#32;the&#32;elapsed&#32;time&#32;in&#32;seconds.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stopTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_ChessGame_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;elapsedSeconds&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::seconds&gt;(stopTime&#32;-&#32;m_moveStartTime).count();
<anchor xml:id="_ChessGame_8cpp_source_1l00311"/>00311 
<anchor xml:id="_ChessGame_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Depending&#32;on&#32;the&#32;player&apos;s&#32;color,&#32;subtract&#32;the&#32;elapsed&#32;time&#32;from&#32;the&#32;base&#32;timer&#32;and&#32;add&#32;the&#32;increment.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_playerOnTurn-&gt;Color()&#32;==&#32;Color::WHITE)
<anchor xml:id="_ChessGame_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerOne&#32;=&#32;(m_timerOne&#32;&gt;&#32;elapsedSeconds)&#32;?&#32;(m_timerOne&#32;-&#32;elapsedSeconds)&#32;:&#32;0;
<anchor xml:id="_ChessGame_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerOne&#32;+=&#32;m_increment;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;increment&#32;after&#32;the&#32;move.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;Assuming&#32;Black.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;{
<anchor xml:id="_ChessGame_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerTwo&#32;=&#32;(m_timerTwo&#32;&gt;&#32;elapsedSeconds)&#32;?&#32;(m_timerTwo&#32;-&#32;elapsedSeconds)&#32;:&#32;0;
<anchor xml:id="_ChessGame_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timerTwo&#32;+=&#32;m_increment;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;the&#32;increment&#32;after&#32;the&#32;move.</emphasis>
<anchor xml:id="_ChessGame_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ChessGame_8cpp_source_1l00323"/>00323 }
</programlisting></section>
