<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPiece" xml:lang="en-US">
<title>Piece Class Reference</title>
<indexterm><primary>Piece</primary></indexterm>
<para>
<computeroutput>#include &lt;Piece.h&gt;</computeroutput>
</para>
Inheritance diagram for Piece:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPiece__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPiece_1a4f0ea7928c9d57ec8f8b14c88358d01f">Piece</link> (<link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> color)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classPiece_1ab63f5b3faabe6ce60c9eb1806511ff9d">~Piece</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> <link linkend="_classPiece_1ad31a695453335fbbc36a9c749395f7c1">Color</link> () const</para>
</listitem>
            <listitem><para>virtual std::string <link linkend="_classPiece_1abc54f78cfc3e6c4ed3d103ddaeb1d96f">Symbol</link> () const =0</para>
</listitem>
            <listitem><para>virtual std::vector&lt; <link linkend="_classMove">Move</link> &gt; <link linkend="_classPiece_1a1c67fd5e66c3e7b6c1f4ebf3207e65e2">PossibleMoves</link> (<link linkend="_classBoard">Board</link> *board, int currentX, int currentY) const =0</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_classPiece_1a363193ff97c3e10b77feb6aec81d1a35">IsValidMove</link> (<link linkend="_classPiece">Piece</link> *target, <link linkend="_classBoard">Board</link> *board, <link linkend="_classMove">Move</link> &amp;move, <link linkend="_classPiece">Piece</link> *&amp;setReplacement) const =0</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_classPiece_1a392fecd481d60993e7d6d73116b2e171">IsKing</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> <link linkend="_classPiece_1a757a577b6dfb06c6558021b828ca7c1d">m_color</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPiece_1a4f0ea7928c9d57ec8f8b14c88358d01f"/><section>
    <title>Piece()</title>
<indexterm><primary>Piece</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>Piece</secondary></indexterm>
<para><computeroutput>Piece::Piece (<link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> color)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classPiece_1ab63f5b3faabe6ce60c9eb1806511ff9d"/><section>
    <title>~Piece()</title>
<indexterm><primary>~Piece</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>~Piece</secondary></indexterm>
<para><computeroutput>virtual Piece::~Piece ( )<computeroutput>[virtual]</computeroutput>, <computeroutput>[default]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPiece_1ad31a695453335fbbc36a9c749395f7c1"/><section>
    <title>Color()</title>
<indexterm><primary>Color</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>Color</secondary></indexterm>
<para><computeroutput><link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> Piece::Color ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classPiece_1a392fecd481d60993e7d6d73116b2e171"/><section>
    <title>IsKing()</title>
<indexterm><primary>IsKing</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>IsKing</secondary></indexterm>
<para><computeroutput>virtual bool Piece::IsKing ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_classKing_1ae5f6eaa800f8ef88416ab92953451265">King</link>.</para>
</section>
<anchor xml:id="_classPiece_1a363193ff97c3e10b77feb6aec81d1a35"/><section>
    <title>IsValidMove()</title>
<indexterm><primary>IsValidMove</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>IsValidMove</secondary></indexterm>
<para><computeroutput>virtual bool Piece::IsValidMove (<link linkend="_classPiece">Piece</link> * target, <link linkend="_classBoard">Board</link> * board, <link linkend="_classMove">Move</link> &amp; move, <link linkend="_classPiece">Piece</link> *&amp; setReplacement) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classBishop_1aada80a713ad52b68be931e2fa01848dd">Bishop</link>, <link linkend="_classKing_1ad69ed8cd25086881cabde8d3ad9bb503">King</link>, <link linkend="_classKnight_1a356a4572773c6b3d415eb4ceaa676bb8">Knight</link>, <link linkend="_classPawn_1af11d10b5d5f2456eb97d835bf0d8b4f8">Pawn</link>, <link linkend="_classQueen_1a2263566de92069f92c77f74b0e2175f8">Queen</link>, and <link linkend="_classRook_1a7ede965f60fe8acd7d673475b04430a7">Rook</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPiece_a363193ff97c3e10b77feb6aec81d1a35_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classPiece_1a1c67fd5e66c3e7b6c1f4ebf3207e65e2"/><section>
    <title>PossibleMoves()</title>
<indexterm><primary>PossibleMoves</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>PossibleMoves</secondary></indexterm>
<para><computeroutput>virtual std::vector&lt; <link linkend="_classMove">Move</link> &gt; Piece::PossibleMoves (<link linkend="_classBoard">Board</link> * board, int currentX, int currentY) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classBishop_1a399c419d4fe7882b795b65be5503b2b8">Bishop</link>, <link linkend="_classKing_1adceeb19b6efe066f1d6882aa859925fd">King</link>, <link linkend="_classKnight_1a5480f41f242d9069cf48603212124f33">Knight</link>, <link linkend="_classPawn_1a8e427faba3cb063c2564f8ee7f2cb7f3">Pawn</link>, <link linkend="_classQueen_1aa5e962499e46e9ea8cdfa25c24404f6d">Queen</link>, and <link linkend="_classRook_1a0fe3c6cddea8fefe9972c663400bce27">Rook</link>.</para>
</section>
<anchor xml:id="_classPiece_1abc54f78cfc3e6c4ed3d103ddaeb1d96f"/><section>
    <title>Symbol()</title>
<indexterm><primary>Symbol</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>Symbol</secondary></indexterm>
<para><computeroutput>virtual std::string Piece::Symbol ( ) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_classBishop_1ab0ca2dd9d66fbbe8169431083b2eb171">Bishop</link>, <link linkend="_classKing_1a665e0aa25a08ca43bfa3fbaa7f68d24b">King</link>, <link linkend="_classKnight_1a69fee9f48cef83fddc0db12895a3daa8">Knight</link>, <link linkend="_classPawn_1a04ed6a9744fe13c85fee3331df8c8aca">Pawn</link>, <link linkend="_classQueen_1a60a43f14bf5934550dd3a4d1830754b3">Queen</link>, and <link linkend="_classRook_1ae7a3c121c8b653efeae7e1b248dffd0a">Rook</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classPiece_1a757a577b6dfb06c6558021b828ca7c1d"/><section>
    <title>m_color</title>
<indexterm><primary>m_color</primary><secondary>Piece</secondary></indexterm>
<indexterm><primary>Piece</primary><secondary>m_color</secondary></indexterm>
<para><computeroutput><link linkend="_Style_8hpp_1ab87bacfdad76e61b9412d7124be44c1c">PieceColor</link> Piece::m_color<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/home/huplo/Coding/Projects/C++/chess-game/include/<link linkend="_Piece_8h">Piece.h</link></section>
</section>
