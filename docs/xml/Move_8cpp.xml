<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="Move_8cpp" kind="file" language="C++">
    <compoundname>Move.cpp</compoundname>
    <includes refid="Move_8h" local="yes">../include/Move.h</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="2">
        <label>../include/Move.h</label>
        <link refid="Move_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Move.cpp</label>
        <link refid="Move_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Move_8h" kindref="compound">../include/Move.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" refkind="member"><highlight class="normal"><ref refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" kindref="member">Move::Move</ref>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" kindref="member">Move</ref>{0,0,0,0}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>numeric<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classMove_1ab9d9c5897fa433018d6834db27ef5713" refkind="member"><highlight class="normal"><ref refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" kindref="member">Move::Move</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startY,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endY)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>startX(startX),<sp/>startY(startY),<sp/>endX(endX),<sp/>endY(endY)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>validateCoordinates(startX,<sp/>startY);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>validateCoordinates(endX,<sp/>endY);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor<sp/>that<sp/>accepts<sp/>a<sp/>move<sp/>string,<sp/>e.g.,<sp/>&quot;e2e4&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classMove_1af1a99100f5604c805ab1feaa7d911513" refkind="member"><highlight class="normal"><ref refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" kindref="member">Move::Move</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>moveStr)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>parseMoveString(moveStr);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classMove_1aee300c99f25c630acd8500fe2141b05e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMove_1aee300c99f25c630acd8500fe2141b05e" kindref="member">Move::empty</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="25"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startX<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>startY<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>endX<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>endY<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>check<sp/>if<sp/>a<sp/>given<sp/>coordinate<sp/>pair<sp/>is<sp/>within<sp/>the<sp/>chessboard<sp/>bounds<sp/>(0-7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Move::validateCoordinates(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="31"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0<sp/>||<sp/>x<sp/>&gt;=<sp/>8<sp/>||<sp/>y<sp/>&lt;<sp/>0<sp/>||<sp/>y<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Coordinates<sp/>out<sp/>of<sp/>bounds.<sp/>Valid<sp/>range<sp/>is<sp/>a<sp/>to<sp/>h<sp/>for<sp/>x<sp/>and<sp/>1<sp/>to<sp/>8<sp/>for<sp/>y.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>a<sp/>move<sp/>string<sp/>of<sp/>the<sp/>format<sp/>\&quot;[a-h][1-8][a-h][1-8]\&quot;<sp/>and<sp/>sets<sp/>the<sp/>coordinates<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Move::parseMoveString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>moveStr)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(moveStr.length()<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Move<sp/>string<sp/>must<sp/>be<sp/>exactly<sp/>4<sp/>characters<sp/>long.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>startFile<sp/>=<sp/>moveStr[0];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>startRank<sp/>=<sp/>moveStr[1];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endFile<sp/>=<sp/>moveStr[2];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endRank<sp/>=<sp/>moveStr[3];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>algebraic<sp/>notation<sp/>into<sp/>0-indexed<sp/>board<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>startX<sp/>=<sp/>startFile<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>startY<sp/>=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal"><sp/>-<sp/>startRank;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>endX<sp/><sp/><sp/>=<sp/>endFile<sp/><sp/><sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>endY<sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal"><sp/>-<sp/>endRank;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>the<sp/>computed<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>validateCoordinates(startX,<sp/>startY);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>validateCoordinates(endX,<sp/>endY);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>whether<sp/>the<sp/>stored<sp/>move<sp/>coordinates<sp/>are<sp/>valid<sp/>within<sp/>an<sp/>8x8<sp/>chessboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classMove_1a6e80a6c039ba805bac3ff6402c56b76c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMove_1a6e80a6c039ba805bac3ff6402c56b76c" kindref="member">Move::isValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(startX<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>startX<sp/>&lt;<sp/>8<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startY<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>startY<sp/>&lt;<sp/>8<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endX<sp/><sp/><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>endX<sp/><sp/><sp/>&lt;<sp/>8<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endY<sp/><sp/><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>endY<sp/><sp/><sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>move<sp/>back<sp/>into<sp/>algebraic<sp/>chess<sp/>notation<sp/>(e.g.,<sp/>\&quot;e2e4\&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classMove_1a1f1dd54e4ef974f1f24277ee14c61beb" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classMove_1a1f1dd54e4ef974f1f24277ee14c61beb" kindref="member">Move::toString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="73"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>startFile<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>startX;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>startRank<sp/>=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal"><sp/>-<sp/>startY;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endFile<sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>endX;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>endRank<sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal"><sp/>-<sp/>endY;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string()<sp/>+<sp/>startFile<sp/>+<sp/>startRank<sp/>+<sp/>endFile<sp/>+<sp/>endRank;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparison<sp/>operator<sp/>to<sp/>check<sp/>if<sp/>two<sp/>moves<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classMove_1a93f3c3240fd5974d8b90ee7fbaefdf4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMove_1a93f3c3240fd5974d8b90ee7fbaefdf4a" kindref="member">Move::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMove_1a4b1acc3a67d30c385ad9a6000526393a" kindref="member">Move</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(startX<sp/>==<sp/>other.startX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startY<sp/>==<sp/>other.startY<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endX<sp/><sp/><sp/>==<sp/>other.endX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endY<sp/><sp/><sp/>==<sp/>other.endY);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Move.cpp"/>
  </compounddef>
</doxygen>
