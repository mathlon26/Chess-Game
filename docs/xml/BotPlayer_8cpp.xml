<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="BotPlayer_8cpp" kind="file" language="C++">
    <compoundname>BotPlayer.cpp</compoundname>
    <includes refid="BotPlayer_8h" local="yes">../include/BotPlayer.h</includes>
    <includes refid="Board_8h" local="yes">../include/Board.h</includes>
    <incdepgraph>
      <node id="9">
        <label>../dependencies/Style.hpp</label>
        <link refid="Style_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Board.h</label>
        <link refid="Board_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/BotPlayer.h</label>
        <link refid="BotPlayer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Move.h</label>
        <link refid="Move_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Piece.h</label>
        <link refid="Piece_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Player.h</label>
        <link refid="Player_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>BotPlayer.cpp</label>
        <link refid="BotPlayer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>array</label>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="10">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>limits</label>
      </node>
      <node id="18">
        <label>random</label>
      </node>
      <node id="13">
        <label>regex</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="19">
        <label>unordered_set</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BotPlayer_8h" kindref="compound">../include/BotPlayer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Board_8h" kindref="compound">../include/Board.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classBotPlayer_1ad520b04b07027663107b8ad003753fff" refkind="member"><highlight class="normal"><ref refid="classBotPlayer_1ad520b04b07027663107b8ad003753fff" kindref="member">BotPlayer::BotPlayer</ref>(<ref refid="Player_8h_1a301cfd5fe9a22cb30292f6e1523247d7" kindref="member">PlayerColor</ref><sp/>color)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPlayer_1ad061cf938c523c0e7d529d5591224250" kindref="member">Player</ref>{color}</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classBotPlayer_1a526b7fc1214d8e2e2c009679f18e177d" refkind="member"><highlight class="normal"><ref refid="classBotPlayer_1a526b7fc1214d8e2e2c009679f18e177d" kindref="member">BotPlayer::~BotPlayer</ref>()</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classPiece" kindref="compound">Piece</ref>*<sp/>piece<sp/>:<sp/><ref refid="classPlayer_1aaef4079e864580e1b197620491d74130" kindref="member">m_captures</ref>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>piece;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classBotPlayer_1aaf2580fa12448259b5142bff4062f0ab" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classBotPlayer_1aaf2580fa12448259b5142bff4062f0ab" kindref="member">BotPlayer::Name</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="18"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classStyle_1a38a11d09d6371559e5795c952d44f9d0" kindref="member">Style::Cts</ref>(<ref refid="classPlayer_1adff61d6fe8f9e732c4dbe5a6bbcb5e42" kindref="member">m_color</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(Bot)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classBotPlayer_1aa6c9035eac0ad8b34c124eeb3876d92a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classBotPlayer_1aa6c9035eac0ad8b34c124eeb3876d92a" kindref="member">BotPlayer::GetInput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBoard" kindref="compound">Board</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>board)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="23"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Move&gt;<sp/>moves<sp/>=<sp/>board-&gt;<ref refid="classBoard_1a1ff64194b703edb37a5c9770de17e48a" kindref="member">GetPossibleMoves</ref>(<ref refid="classPlayer_1adff61d6fe8f9e732c4dbe5a6bbcb5e42" kindref="member">m_color</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Move&gt;<sp/>validMoves{};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>move<sp/>:<sp/>moves)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(m_cache.begin(),<sp/>m_cache.end(),<sp/>move.toString())<sp/>==<sp/>m_cache.end())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validMoves.push_back(move);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>moves<sp/>are<sp/>available,<sp/>return<sp/>a<sp/>&quot;resign&quot;<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validMoves.empty())</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;resign&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>random<sp/>engine<sp/>with<sp/>a<sp/>random<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(rd());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dis(0,<sp/>validMoves.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>dis(gen);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMove" kindref="compound">Move</ref><sp/>chosenMove<sp/>=<sp/>validMoves[index];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chosenMove.<ref refid="classMove_1a1f1dd54e4ef974f1f24277ee14c61beb" kindref="member">toString</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classBotPlayer_1a5e79536cccb4c8d9452a79950a598351" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBotPlayer_1a5e79536cccb4c8d9452a79950a598351" kindref="member">BotPlayer::IsBot</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classBotPlayer_1a36fb5ce4f6a78a751d7a95b7b8ebc1ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBotPlayer_1a36fb5ce4f6a78a751d7a95b7b8ebc1ea" kindref="member">BotPlayer::AddCache</ref>(std::string<sp/>moveStr)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cache.insert(moveStr);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classBotPlayer_1ada837bf49ac76c75947bc77d4af07088" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBotPlayer_1ada837bf49ac76c75947bc77d4af07088" kindref="member">BotPlayer::EmptyCache</ref>()</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cache.clear();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="BotPlayer.cpp"/>
  </compounddef>
</doxygen>
